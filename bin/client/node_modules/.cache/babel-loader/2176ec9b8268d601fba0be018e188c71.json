{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dkhor\\\\Desktop\\\\DI_folder\\\\Developers_Institute\\\\bin\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport Register from \"./Components/Register/Register\";\nimport Signin from \"./Components/Signin/Signin\";\nimport Navigation from \"./Components/Navigation/Navigation\";\nimport Board from './Components/Board';\nimport Board2 from './Components/Board2';\nimport Card from './Components/Card';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this._isMounted = false;\n\n    this.loadUser = data => {\n      console.log(data.score);\n      this.setState({\n        user: {\n          id: data.id,\n          name: data.name,\n          email: data.email,\n          entries: data.entries,\n          joined: data.joined\n        },\n        score_params: {\n          score: data.score,\n          checked: false\n        }\n      });\n    };\n\n    this.onRouteChange = route => {\n      if (route === 'signout') {\n        this.setState({\n          isSignedIn: false\n        });\n      } else if (route === 'home') {\n        this.setState({\n          isSignedIn: true\n        });\n        let words = [];\n        let definitions = [];\n        let ind_col = [0, 1, 2, 3, 4, 5];\n\n        for (let i = 0; i < 6; i++) {\n          fetch(\"https://wordsapiv1.p.rapidapi.com/words/?random=true&lettersMin=6&hasDetails=definitions&letterpattern=/^\\S+$\", {\n            \"method\": \"GET\",\n            \"headers\": {\n              \"x-rapidapi-host\": \"wordsapiv1.p.rapidapi.com\",\n              \"x-rapidapi-key\": \"4ca040923dmshca781b0df1ed411p18c182jsn7d523d812233\"\n            }\n          }).then(result => result.json()).then(data1 => {\n            words.push(data1.word);\n            definitions.push([ind_col.splice(Math.floor(Math.random() * ind_col.length), 1), data1.results]);\n          }).catch(err => console.log(err));\n        }\n\n        this.setState({\n          user: {\n            words: words,\n            definitions: definitions\n          }\n        });\n      }\n\n      this.setState({\n        route: route\n      });\n    };\n\n    this.state = {\n      //To Route the between signin forms and dashboard\n      route: 'signin',\n      isSignedIn: false,\n      user: {\n        id: '',\n        name: '',\n        email: '',\n        entries: 0,\n        joined: '',\n        words: [],\n        definitions: []\n      },\n      score_params: {\n        score: 0,\n        checked: false\n      }\n    };\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    setInterval(() => {\n      this.setState(() => {\n        return {\n          unseen: \"does not display\"\n        };\n      });\n    }, 3000);\n  } //Function to load the user when register form is inputed(pass function to Register Component)\n\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  render() {\n    //Destructuring our states instead of using this.state\n    const {\n      isSignedIn,\n      route\n    } = this.state;\n\n    const clickHandler = ({\n      email\n    }) => {\n      console.log(\"Click!\");\n      let counter = 0;\n\n      for (let i = 0; i < 6; i++) {\n        let elem = document.getElementById(i);\n\n        if (elem.children[1].children.length === 1) {\n          counter++;\n        }\n      }\n\n      if (counter < 5) {\n        alert(\"Please drag all definitions to the right words!\");\n      } else {\n        let counter2 = 0;\n\n        for (let i = 0; i < 6; i++) {\n          let elem = document.getElementById(i);\n\n          if (parseInt(elem.children[1].children[0].id[3], 10) === i) {\n            counter2++;\n          }\n        }\n\n        if (counter2 == 6) {\n          alert(\"Well done!\");\n\n          if (!this._isMounted) {\n            this.setState({\n              user: {\n                words: [],\n                definitions: []\n              }\n            });\n          }\n\n          let words = [];\n          let definitions = [];\n          let ind_col = [0, 1, 2, 3, 4, 5];\n\n          for (let i = 0; i < 6; i++) {\n            fetch(\"https://wordsapiv1.p.rapidapi.com/words/?random=true&lettersMin=6&hasDetails=definitions&letterpattern=/^\\S+$\", {\n              \"method\": \"GET\",\n              \"headers\": {\n                \"x-rapidapi-host\": \"wordsapiv1.p.rapidapi.com\",\n                \"x-rapidapi-key\": \"4ca040923dmshca781b0df1ed411p18c182jsn7d523d812233\"\n              }\n            }).then(result => result.json()).then(data => {\n              console.log(id);\n\n              if (this.state.user.words.length === 6) {\n                let board = document.getElementsByClassName(\"board\")[1];\n\n                for (let x = 0; x < 6; x++) {\n                  let elem = document.getElementById(`def${x}`);\n                  elem.parentElement.style.height = \"50px\";\n                  board.appendChild(elem);\n                  console.log(`elem ${x} done!`);\n                }\n\n                words.push(data.word);\n\n                if (this.state.score_params.checked) {\n                  this.setState({\n                    user: {\n                      id: this.state.user.id,\n                      words: [data.word],\n                      definitions: [[ind_col.splice(Math.floor(Math.random() * ind_col.length), 1), data.results]]\n                    },\n                    score_params: {\n                      checked: false,\n                      score: this.state.score_params.score\n                    }\n                  });\n                } else {\n                  this.setState({\n                    user: {\n                      id: this.state.user.id,\n                      words: [data.word],\n                      definitions: [[ind_col.splice(Math.floor(Math.random() * ind_col.length), 1), data.results]]\n                    },\n                    score_params: {\n                      checked: false,\n                      score: this.state.score_params.score + 6\n                    }\n                  });\n                }\n\n                fetch('http://localhost:3001/users', {\n                  method: 'post',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify({\n                    id: id,\n                    score: this.state.score_params.score\n                  })\n                }).then(response => response.json());\n              } else {\n                this.setState({\n                  user: {\n                    words: [...this.state.user.words, data.word],\n                    definitions: [...this.state.user.definitions, [ind_col.splice(Math.floor(Math.random() * ind_col.length), 1), data.results]]\n                  }\n                });\n                console.log(this.state.user.definitions);\n              }\n            }).catch(err => console.log(err));\n          }\n        } else {\n          if (!this.state.score_params.checked) {\n            this.setState({\n              score_params: {\n                checked: true,\n                score: this.state.score_params.score + counter2\n              }\n            });\n          }\n\n          alert(`You got ${counter2} words correctly. Try again!`);\n        }\n      }\n    };\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Navigation, {\n      isSignedIn: isSignedIn,\n      onRouteChange: this.onRouteChange,\n      score: this.state.score_params.score,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }\n    }),\n    /* Jsx Javascript expression to know when to change the route */\n    route === 'home' ?\n    /*#__PURE__*/\n    //if this is true then route to home dashboard\n    React.createElement(\"div\", {\n      className: \"flexbox\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(Board, {\n      words: this.state.user.words,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 16\n      }\n    }), /*#__PURE__*/React.createElement(Board2, {\n      definitions: this.state.user.definitions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 16\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => {\n        clickHandler(this.state.user.email);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 16\n      }\n    }, \"Done!\")) : //else if route is Signin go to Signin\n    route === 'signin' ? /*#__PURE__*/React.createElement(Signin, {\n      loadUser: this.loadUser,\n      onRouteChange: this.onRouteChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 14\n      }\n    }) :\n    /*#__PURE__*/\n    //else return the route to Register\n    React.createElement(Register, {\n      loadUser: this.loadUser,\n      onRouteChange: this.onRouteChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 14\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/dkhor/Desktop/DI_folder/Developers_Institute/bin/client/src/App.js"],"names":["React","Component","Register","Signin","Navigation","Board","Board2","Card","App","constructor","_isMounted","loadUser","data","console","log","score","setState","user","id","name","email","entries","joined","score_params","checked","onRouteChange","route","isSignedIn","words","definitions","ind_col","i","fetch","then","result","json","data1","push","word","splice","Math","floor","random","length","results","catch","err","state","componentDidMount","setInterval","unseen","componentWillUnmount","render","clickHandler","counter","elem","document","getElementById","children","alert","counter2","parseInt","board","getElementsByClassName","x","parentElement","style","height","appendChild","method","headers","body","JSON","stringify","response"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Register from \"./Components/Register/Register\";\nimport Signin from \"./Components/Signin/Signin\";\nimport Navigation from \"./Components/Navigation/Navigation\";\nimport Board from './Components/Board';\nimport Board2 from './Components/Board2';\nimport Card from './Components/Card';\n\n\n\nclass App extends Component {\n  _isMounted = false;\n  constructor() {\n    super();\n\n    this.state = {\n\n\n      //To Route the between signin forms and dashboard\n      route: 'signin',\n      isSignedIn: false,\n\n      user: {\n\n        id: '',\n        name: '',\n        email: '',\n        entries: 0,\n        joined: '',\n        words:[],\n        definitions:[],\n      },\n\n      score_params: {\n        score:0,\n        checked: false\n      }\n\n    }\n  }\n  componentDidMount(){\n  this._isMounted = true;\n  setInterval(() => {\n           this.setState(() => {\n               return { unseen: \"does not display\" }\n           });\n       }, 3000);\n  }\n  //Function to load the user when register form is inputed(pass function to Register Component)\n  loadUser = (data) => {\n    console.log(data.score)\n    this.setState({user: {\n\n      id: data.id,\n      name: data.name,\n      email: data.email,\n      entries: data.entries,\n      joined: data.joined,\n    },\n    score_params: {\n      score:data.score,\n      checked: false\n    }\n  })\n  }\n\n\n\n\n  //Function to Change Routes from Signin and Home Dashboard\n  onRouteChange = (route) => {\n\n    if (route === 'signout') {\n\n      this.setState({isSignedIn: false});\n\n    } else if (route === 'home') {\n      this.setState({isSignedIn: true});\n      let words = [];\n      let definitions = [];\n      let ind_col = [0,1,2,3,4,5]\n      for (let i = 0; i < 6;i++ ){\n        fetch(\"https://wordsapiv1.p.rapidapi.com/words/?random=true&lettersMin=6&hasDetails=definitions&letterpattern=/^\\S+$\",\n        {\n          \"method\": \"GET\",\n          \"headers\": {\n            \"x-rapidapi-host\": \"wordsapiv1.p.rapidapi.com\",\n            \"x-rapidapi-key\": \"4ca040923dmshca781b0df1ed411p18c182jsn7d523d812233\"\n          }\n        })\n        .then(result => result.json())\n        .then(data1 => {\n                  words.push(data1.word);\n                  definitions.push([ind_col.splice(Math.floor(Math.random()*ind_col.length), 1), data1.results])\n        })\n        .catch(err => console.log(err))\n        }\n      this.setState({user:{words:words,definitions:definitions}})\n\n  }\n    this.setState({route: route});\n  }\n\n  componentWillUnmount() {\n   this._isMounted = false;\n }\n\n  render() {\n    //Destructuring our states instead of using this.state\n    const { isSignedIn, route} = this.state;\n    const clickHandler = ({email}) => {\n      console.log(\"Click!\")\n      let counter = 0;\n      for (let i = 0; i<6; i++){\n        let elem = document.getElementById(i);\n        if (elem.children[1].children.length === 1) {\n          counter++\n        }\n      }\n      if (counter < 5){\n        alert(\"Please drag all definitions to the right words!\")\n      } else {\n        let counter2 = 0;\n        for (let i = 0; i<6; i++){\n          let elem = document.getElementById(i);\n          if (parseInt(elem.children[1].children[0].id[3], 10) === i) {\n            counter2++\n          }\n        }\n        if (counter2 == 6) {\n          alert(\"Well done!\")\n          if(!this._isMounted ) {this.setState({user:{words:[],definitions:[]}})}\n          let words = [];\n          let definitions = [];\n          let ind_col = [0,1,2,3,4,5]\n          for (let i = 0; i < 6;i++ ){\n            fetch(\"https://wordsapiv1.p.rapidapi.com/words/?random=true&lettersMin=6&hasDetails=definitions&letterpattern=/^\\S+$\",\n             {\n               \"method\": \"GET\",\n               \"headers\": {\n                 \"x-rapidapi-host\": \"wordsapiv1.p.rapidapi.com\",\n                 \"x-rapidapi-key\": \"4ca040923dmshca781b0df1ed411p18c182jsn7d523d812233\"\n               }\n             })\n             .then(result => result.json())\n             .then(data => {\n                      console.log(id)\n                      if (this.state.user.words.length === 6){\n                        let board = document.getElementsByClassName(\"board\")[1]\n                        for (let x = 0;x<6;x++){\n                          let elem = document.getElementById(`def${x}`)\n                          elem.parentElement.style.height = \"50px\"\n                          board.appendChild(elem)\n                          console.log(`elem ${x} done!`)\n                        }\n                        words.push(data.word);\n                        if (this.state.score_params.checked) {\n                        this.setState({user:{id: this.state.user.id,\n                        words:[data.word],\n                        definitions:[[ind_col.splice(Math.floor(Math.random()*ind_col.length), 1), data.results]]},\n                        score_params:{\n                        checked: false,\n                        score:this.state.score_params.score}});\n                      } else {\n                        this.setState({user:{id: this.state.user.id,\n                        words:[data.word],\n                        definitions:[[ind_col.splice(Math.floor(Math.random()*ind_col.length), 1), data.results]]},\n                        score_params:{\n                        checked: false,\n                        score:this.state.score_params.score+6}});\n                      }\n                        fetch('http://localhost:3001/users', {\n                            method: 'post',\n                            headers: {'Content-Type': 'application/json'},\n                            body: JSON.stringify({\n                                id: id,\n                                score: this.state.score_params.score\n                            })\n                        })\n                        .then(response => response.json())\n                      } else {\n                      this.setState({user:{words:[...this.state.user.words, data.word],\n                        definitions: [...this.state.user.definitions,[ind_col.splice(Math.floor(Math.random()*ind_col.length), 1), data.results]]}})\n                        console.log(this.state.user.definitions)\n                      }\n             })\n             .catch(err => console.log(err))\n             }\n        } else {\n          if (!this.state.score_params.checked){\n            this.setState({score_params:{checked:true, score:this.state.score_params.score + counter2}})\n          }\n          alert(`You got ${counter2} words correctly. Try again!`)\n        }\n      }\n    }\n\n    return (\n      <div className=\"App\">\n\n        <Navigation isSignedIn={isSignedIn} onRouteChange={this.onRouteChange} score={this.state.score_params.score}/>\n\n\n        { /* Jsx Javascript expression to know when to change the route */\n\n         route === 'home' ? //if this is true then route to home dashboard\n\n             <div className=\"flexbox\">\n\n               <Board words={this.state.user.words}/>\n               <Board2 definitions={this.state.user.definitions}/>\n               <button onClick={()=>{clickHandler(this.state.user.email)}}>Done!</button>\n             </div>\n\n           : (   //else if route is Signin go to Signin\n\n             route === 'signin' ?\n\n             <Signin loadUser={this.loadUser} onRouteChange={this.onRouteChange} />\n\n           :\n\n             //else return the route to Register\n\n             <Register loadUser={this.loadUser} onRouteChange={this.onRouteChange} />\n           )\n\n\n        }\n\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}